{
    "FunctionEventSource": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
                "Fn::Join": [ "", [ 
                    "arn:aws:iam::", 
                    { "Ref": "AWS::AccountId" }, 
                    ":role/",
                    "lambda_basic_execution"
                ]
            ]
        },
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var response = require('cfn-response');",
            "exports.handler = function(event, context) {",
            "  console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
            "  var responseData = {};",
            "  var aws = require('aws-sdk');",
            "  var lambda = new aws.Lambda();",
            "  function cb(err, data) {",
            "    if (err) {",
            "      responseData = {Error: 'Failed to subscribe to event source'};",
            "      console.log(responseData.Error + ':\\n', err);",
            "      response.send(event, context, response.FAILED, responseData);",
            "    } else {",
            "      response.send(event, context, response.SUCCESS, data, data.UUID);",
            "    }",
            "  }",
            "  var eventSrcArn = event.ResourceProperties.EventSourceArn;",
            "  var functionName = event.ResourceProperties.Function;",
            "  if (event.RequestType == 'Delete') {",
            "    lambda.listEventSourceMappings({EventSourceArn: eventSrcArn, FunctionName:functionName}, function(err, data) {",
            "      if (err) return cb(err);",
            "      lambda.deleteEventSourceMapping({UUID:data.EventSourceMappings[0].UUID}, cb);",
            "    });",
            "    return;",
            "  } else {",
            "    var enabled = event.ResourceProperties.Enabled === 'true' ? true : false;",
            "    var startingPos = event.ResourceProperties.StartingPosition;",
            "    var batchSize = event.ResourceProperties.BatchSize || 0;",
            "    var params = {EventSourceArn:eventSrcArn, FunctionName:functionName, StartingPosition:startingPos, BatchSize:batchSize, Enabled:enabled}",
            "    if (eventSrcArn && functionName && startingPos) {",
            "      if (event.RequestType == 'Create') {",            
            "        lambda.createEventSourceMapping(params, cb);",
            "      }",            
            "      if (event.RequestType == 'Update') {",
            "        sns.updateEventSourceMapping(params, cb);",
            "      }",            
            "    } else {",
            "      responseData = {Error: 'Missing one of required arguments'};",
            "      console.log(responseData.Error);",
            "      console.log(eventSrcArn, 'eventSrcArn');",
            "      console.log(functionName, 'functionName');",
            "      console.log(startingPos, 'startingPos');",
            "      response.send(event, context, response.FAILED, responseData);",
            "    }",            
            "  }",
            "};"
          ]]}
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    }    
}